{
  "name": "milk",
  "version": "1.2.0",
  "homepage": "https://github.com/pvande/Milk",
  "author": {
    "name": "Pieter van de Bruggen",
    "email": "pvande@gmail.com",
    "url": "http://pvande.net/"
  },
  "description": "A Mustache implementation written in CoffeeScript",
  "keywords": [
    "mustache",
    "coffeescript",
    "template"
  ],
  "main": "./milk",
  "scripts": {
    "test": "vows ./test/*"
  },
  "dependencies": {
    "coffee-script": "0.9.6 || >=1.0.0"
  },
  "devDependencies": {
    "vows": "0.5.2",
    "docco": "0.3.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pvande/Milk.git"
  },
  "readme": "Milk\n====\n\n      Idly the man scrawled quill along page.  It was early yet, but his day\n    had scarcely begun.  Great sheaves of nearly identical work sat about his\n    desk as the clock clicked slowly to itself.  One by one, new pages joined\n    the ranks, permeated with the smell of roasted beans as the pen drew\n    coffee as often as ink.\n      Exhausted, he collapsed atop his work in a fitful doze.  Images began to\n    invade his unconscious mind, of flight and fancy, and jubilant impropriety.\n    Then just as suddenly as he had slept, he woke, the image of a small child\n    wearing a big smile and a heavy coat of Milk on his upper lip startling him\n    back to alertness.\n      He saw clearly, as he looked across his paper-strewn desk, that the task\n    could be changed – and for once, it looked like fun.\n\nMilk is a [spec-conforming](https://github.com/mustache/spec) (v1.1+λ)\nimplementation of the [Mustache](http://mustache.github.com) templating\nlanguage, written in [CoffeeScript](http://coffeescript.com).  Templates can be\nrendered server-side (through Node.js or any other CommonJS platform), or,\nsince CoffeeScript compiles to Javascript, on the client-side in the browser\nof your choice.\n\nTry Milk Now\n------------\n\nWondering what it can do?\n[Hit the playground!](http://pvande.github.com/Milk/playground.html)\n\nInstallation\n------------\n\n    npm install milk\n\nUsage\n-----\n\nMilk is built for use both in CommonJS environments and in the browser (where\nit will be exported as `window.Milk`).  The public API is deliberately simple:\n\n### render\n\n``` javascript\n  Milk.render(template, data);            // => 'A rendered template'\n  Milk.render(template, data, partials);  // => 'A rendered template'\n```\n\nThe `render` method is the core of Milk. In its simplest form, it takes a\nMustache template string and a data object, returning the rendered template.\nIt also takes an optional third parameter, which can be either a hash of named\npartial templates, or a function that takes a partial name and returns the\npartial.\n\n### partials\n\n``` javascript\n  Milk.partials = { ... };\n\n  // equivalent to Milk.render(template, data, Milk.partials)\n  Milk.render(template, data);\n```\n\nIf your application's needs for partials are relatively simple, it may make\nmore sense to handle partial resolution globally.  To support this, your calls\nto `render` will automatically fall back to using `Milk.partials` when you\ndon't supply explicit partial resolution.\n\n### helpers\n\n``` javascript\n  Milk.helpers = { ... };  // will also work with an array\n\n  // everything from Milk.helpers lives at the bottom of the context stack\n  Milk.render(template, data);\n```\n\nWhether for internationalization or syntax highlighting, sometimes you'll find\nyourself needing certain functions available everywhere in your templates.\nTo help enable this behavior, Milk.helpers acts as the baseline for your\ncontext stack, providing a quick way to all the global data and functions you\nneed.\n\n### escape\n\n``` javascript\n  Milk.escape('<tag type=\"evil\">');  // => '&lt;tag type=&quot;evil&quot;&gt;'\n\n  Milk.escape = function(str) { return str.split(\"\").reverse().join(\"\") };\n\n  // Milk.escape is used to handle all escaped tags\n  var template = \"{{data}} is {{{data}}}\";\n  Milk.render(template, { \"data\": \"reversed\" });  // => \"desrever is reversed\"\n```\n\n`Milk.escape` is the function that Milk uses to handle escaped interpolation.\nAs such, you can use it (e.g. from lambdas) to perform the same escaping that\nMilk does, or you can override it to change the behavior of escaped tags.\n\n### VERSION\n\n``` javascript\n  Milk.VERSION  // => '1.2.0'\n```\n\nFor when you absolutely must know what version of the library you're running.\n\nDocumentation\n-------------\n\nMilk itself is documented more completely at http://pvande.github.com/Milk \n(public API documentation is\n[this bit](http://pvande.github.com/Milk#section-26)).\n\nThe Mustache templating language is documented at http://mustache.github.com.\n\nCopyright\n---------\n\nCopyright (c) 2011 Pieter van de Bruggen.\n\n(The GIFT License, v2)\n\nPermission is hereby granted to use this software and/or its source code for\nwhatever purpose you should choose.  Seriously, go nuts. Use it to build your\nfamily CMS, your incredibly popular online text adventure, or to mass-produce\nConstitutions for North African countries.\n\nI don't care, it's yours.  Change the name on it if you want -- in fact, if\nyou start significantly changing what it does, I'd rather you did!  Make it\nyour own little work of art, complete with a stylish flowing signature in the\ncorner. All I really did was give you the canvas.  And my blessing.\n\n    Know always right from wrong, and let others see your good works.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pvande/Milk/issues"
  },
  "_id": "milk@1.2.0",
  "dist": {
    "shasum": "2ce1d271294cbf1f0abac0654f6106cb478cd86c"
  },
  "_from": "milk@",
  "_resolved": "https://registry.npmjs.org/milk/-/milk-1.2.0.tgz"
}
